// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Event {
  id           Int            @id @default(autoincrement())
  name         String
  description  String         @db.Text
  date         DateTime?
  location     String?
  status       EventStatus    @default(ONGOING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Registration Registration[]
}

enum EventStatus {
  ONGOING
  CANCELLED
  ENDED
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Document {
  id             Int          @id @default(autoincrement())
  registration   Registration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  registrationId Int
  filePath       String       @db.VarChar(255)
  documentType   DocumentType
  uploadedAt     DateTime
}

enum DocumentType {
  ID
  Photo
}

// model Role {
//   id       Int      @id @default(autoincrement())
//   roleName UserRole @unique @default(USER)
//   users    User[]
// }

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

model Registration {
  id        Int                @id @default(autoincrement())
  userId    String
  eventId   Int
  createdAt DateTime           @default(now())
  status    RegistrationStatus @default(pending)

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  documents Document[]
}

enum RegistrationStatus {
  pending
  approved
  rejected
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  password      String?
  emailVerified DateTime?      @map("email_verified")
  image         String?
  phone         String?        @db.VarChar(20)
  address       String?        @db.Text
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // roleId        Int
  // role          Role           @default(USER) @relation(fields: [roleId], references: [id])
  role          UserRole       @default(USER)
  accounts      Account[]
  sessions      Session[]
  registrations Registration[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
